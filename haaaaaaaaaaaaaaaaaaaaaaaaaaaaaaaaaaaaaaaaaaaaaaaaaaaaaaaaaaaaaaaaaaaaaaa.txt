from service.IEmployeeService import IEmployeeService
from exception import DatabaseConnectionException, EmployeeNotFoundException
from entity.employee import Employee
from util.DBConnUtil import DBConnUtil

class EmployeeService(IEmployeeService):
    def __init__(self):
        self.db_conn = DBConnUtil.get_connection()

    def get_employee_by_id(self, employee_id):
        try:
            cursor = self.db_conn.cursor()
            query = "SELECT * FROM Employee WHERE EmployeeID = %s"
            cursor.execute(query, (employee_id,))
            employee_data = cursor.fetchone()
            cursor.close()
            if employee_data:
                return Employee(*employee_data)
            else:
                raise EmployeeNotFoundException("Employee not found.")
        except Exception as e:
            raise DatabaseConnectionException("Error fetching employee data from database.") from e

    def get_all_employees(self):
        try:
            cursor = self.db_conn.cursor()
            query = "SELECT * FROM Employee"
            cursor.execute(query)
            employees_data = cursor.fetchall()
            cursor.close()
            employees = []
            for employee_data in employees_data:
                employees.append(Employee(*employee_data))
            return employees
        except Exception as e:
            raise DatabaseConnectionException("Error fetching employees data from database.") from e

    def add_employee(self, employee):
        try:
            cursor = self.db_conn.cursor()
            query = "INSERT INTO Employee (FirstName, LastName, DateOfBirth, Gender, Email, PhoneNumber, Address, Position, JoiningDate, TerminationDate) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"
            cursor.execute(query, (employee.get_first_name(), employee.get_last_name(), employee.get_date_of_birth(), employee.get_gender(), employee.get_email(), employee.get_phone_number(), employee.get_address(), employee.get_position(), employee.get_joining_date(), employee.get_termination_date()))
            self.db_conn.commit()
            cursor.close()
        except Exception as e:
            raise DatabaseConnectionException("Error adding employee to database.") from e

    def update_employee(self, employee):
        try:
            cursor = self.db_conn.cursor()
            query = "UPDATE Employee SET FirstName = %s, LastName = %s, DateOfBirth = %s, Gender = %s, Email = %s, PhoneNumber = %s, Address = %s, Position = %s, JoiningDate = %s, TerminationDate = %s WHERE EmployeeID = %s"
            cursor.execute(query, (employee.get_first_name(), employee.get_last_name(), employee.get_date_of_birth(), employee.get_gender(), employee.get_email(), employee.get_phone_number(), employee.get_address(), employee.get_position(), employee.get_joining_date(), employee.get_termination_date(), employee.get_employee_id()))
            self.db_conn.commit()
            cursor.close()
        except Exception as e:
            raise DatabaseConnectionException("Error updating employee in database.") from e

    def remove_employee(self, employee_id):
        try:
            cursor = self.db_conn.cursor()
            query = "DELETE FROM Employee WHERE EmployeeID = %s"
            cursor.execute(query, (employee_id,))
            self.db_conn.commit()
            cursor.close()
        except Exception as e:
            raise DatabaseConnectionException("Error removing employee from database.") from e
