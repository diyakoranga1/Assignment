def add_employee(self, employee):
    try:
        cursor = self.db_conn.cursor()
        query = "INSERT INTO Employee (FirstName, LastName, DateOfBirth, Gender, Email, PhoneNumber, Address, Position, JoiningDate, TerminationDate) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"
        cursor.execute(query, (employee.first_name, employee.last_name, employee.date_of_birth, employee.gender, employee.email, employee.phone_number, employee.address, employee.position, employee.joining_date, employee.termination_date))
        self.db_conn.commit()
        cursor.close()
    except Exception as e:
        raise DatabaseConnectionException("Error adding employee to database.") from e

    def add_employee(self):
        try:
            # Gather employee details from user input
            first_name = input("Enter first name: ")
            last_name = input("Enter last name: ")
            date_of_birth = input("Enter date of birth (YYYY-MM-DD): ")
            gender = input("Enter gender: ")
            email = input("Enter email address: ")
            phone_number = input("Enter phone number: ")
            address = input("Enter address: ")
            position = input("Enter position: ")
            joining_date = input("Enter joining date (YYYY-MM-DD): ")
            termination_date = input("Enter termination date (if any, otherwise press Enter): ")

            # Create an instance of the Employee class with the required attributes
            employee = Employee(first_name, last_name, date_of_birth, gender, email, phone_number, address, position, joining_date, termination_date)

            # Add employee using the service
            self.employee_service.add_employee(employee)
            print("Employee added successfully!")
        except InvalidInputException as e:
            print(e)
        except DatabaseConnectionException as e:
            print(e)
