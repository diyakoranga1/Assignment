from typing import List
from service.IPayrollService import IPayrollService
from exception import DatabaseConnectionException
from entity.payroll import Payroll
from util.DBConnUtil import DBConnUtil

class PayrollService(IPayrollService):
    def __init__(self):
        self.db_conn = DBConnUtil.get_connection()

    def generate_payroll(self, employee_id: int, start_date: str, end_date: str):
        """
        Generate payroll for an employee within a specified period.

        Parameters:
            employee_id (int): The ID of the employee for whom payroll is to be generated.
            start_date (str): The start date of the payroll period (YYYY-MM-DD).
            end_date (str): The end date of the payroll period (YYYY-MM-DD).

        Raises:
            DatabaseConnectionException: If there's an error connecting to the database.
        """
        try:
            # Calculate total hours worked by the employee during the period
            total_hours_worked = self.calculate_total_hours_worked(employee_id, start_date, end_date)
            
            # Get hourly rate of the employee
            hourly_rate = self.get_hourly_rate(employee_id)
            
            # Calculate total salary
            total_salary = total_hours_worked * hourly_rate
            
            # Create a Payroll object
            payroll = Payroll(employee_id, start_date, end_date, total_salary)
            
            # Save the payroll to the database
            self.save_payroll(payroll)
        except Exception as e:
            raise DatabaseConnectionException("Error generating payroll.") from e

    def calculate_total_hours_worked(self, employee_id: int, start_date: str, end_date: str) -> float:
        """
        Calculate the total hours worked by an employee within a specified period.

        Parameters:
            employee_id (int): The ID of the employee.
            start_date (str): The start date of the period.
            end_date (str): The end date of the period.

        Returns:
            float: The total hours worked by the employee.

        Raises:
            DatabaseConnectionException: If there's an error connecting to the database.
        """
        try:
            # Connect to the database
            cursor = self.db_conn.cursor()

            # Query to calculate total hours worked
            query = """
                SELECT SUM(hours_worked) FROM timesheet
                WHERE employee_id = %s AND date BETWEEN %s AND %s
            """
            cursor.execute(query, (employee_id, start_date, end_date))
            total_hours = cursor.fetchone()[0] or 0  # Handle case where no hours are logged

            cursor.close()
            return total_hours
        except Exception as e:
            raise DatabaseConnectionException("Error calculating total hours worked.") from e

    def get_hourly_rate(self, employee_id: int) -> float:
        """
        Retrieve the hourly rate of an employee.

        Parameters:
            employee_id (int): The ID of the employee.

        Returns:
            float: The hourly rate of the employee.

        Raises:
            DatabaseConnectionException: If there's an error connecting to the database.
        """
        try:
            # Connect to the database
            cursor = self.db_conn.cursor()

            # Query to fetch hourly rate
            query = "SELECT hourly_rate FROM employee WHERE employee_id = %s"
            cursor.execute(query, (employee_id,))
            hourly_rate = cursor.fetchone()[0]  # Assuming hourly_rate is a column in the employee table

            cursor.close()
            return hourly_rate
        except Exception as e:
            raise DatabaseConnectionException("Error fetching hourly rate.") from e

    def save_payroll(self, payroll: Payroll):
        """
        Save the payroll information to the database.

        Parameters:
            payroll (Payroll): The Payroll object to be saved.

        Raises:
            DatabaseConnectionException: If there's an error connecting to the database.
        """
        try:
            # Connect to the database
            cursor = self.db_conn.cursor()

            # Insert payroll data into the database
            query = """
                INSERT INTO payroll (employee_id, start_date, end_date, total_salary)
                VALUES (%s, %s, %s, %s)
            """
            cursor.execute(query, (payroll.employee_id, payroll.start_date, payroll.end_date, payroll.total_salary))
            self.db_conn.commit()

            cursor.close()
        except Exception as e:
            raise DatabaseConnectionException("Error saving payroll.") from e




from abc import ABC, abstractmethod

class IPayrollService(ABC):
    @abstractmethod
    def generate_payroll(self, employee_id: int, start_date: str, end_date: str):
        """
        Generate payroll for an employee within a specified period.

        Parameters:
            employee_id (int): The ID of the employee for whom payroll is to be generated.
            start_date (str): The start date of the payroll period (YYYY-MM-DD).
            end_date (str): The end date of the payroll period (YYYY-MM-DD).
        """

    @abstractmethod
    def calculate_total_hours_worked(self, employee_id: int, start_date: str, end_date: str) -> float:
        """
        Calculate the total hours worked by an employee within a specified period.

        Parameters:
            employee_id (int): The ID of the employee.
            start_date (str): The start date of the period.
            end_date (str): The end date of the period.

        Returns:
            float: The total hours worked by the employee.
        """

    @abstractmethod
    def get_hourly_rate(self, employee_id: int) -> float:
        """
        Retrieve the hourly rate of an employee.

        Parameters:
            employee_id (int): The ID of the employee.

        Returns:
            float: The hourly rate of the employee.
        """

    @abstractmethod
    def save_payroll(self, payroll):
        """
        Save the payroll information to the database.

        Parameters:
            payroll: The Payroll object to be saved.
        """
